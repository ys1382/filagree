import '../mesh'
import 'im'

####### net


client = [

    'contacts' : (sys.load('contacts') or []),
    'roster' : [],
    'unread' : [],
    'mesh' : Mesh,
    'port' : port,

    'handle_message' : function(self, socket, mc1)
        e = mc1.event
        if e == 'greet' then
            self.login()
        else if e == 'signined' then
            self.handle_signined(socket, mc1)
        else if e == 'chat' then
            self.handle_chat(mc1.chat, mc1.from)
        else if e == 'contacts' then
            self.handle_contacts(mc1.contacts)
        else if e == 'online' then
            self.handle_online(mc1.from, mc1.online)
        else if e == 'test' then
            self.handle_test(mc1)
            return
        else
            self.sync.handle_message(socket, mc1)
        end
    end,

    'connect' : function(self, id)
        #sys.print('connect')
        self.mesh = self.mesh.init(id or self.creds.id, self.port, [self])
        self.mesh.connect()
    end,

    'login' : function(self)
        #sys.print('login ' + self.creds)
        if not self.mesh.id then
            self.connect()
        else if self.entrance then
            msgl = ['event' : self.entrance] + self.creds
            self.mesh.send(self.server, msgl)
            self.entrance = nil
        end
    end,

    'connected' : function(self, socket)
        self.mesh.print('connected ' + socket)
        self.server = socket
    end,

    'handle_contacts' : function(self, contacts)
        self.mesh.print('handle_contacts ' + contacts)
        self.contacts = contacts
        onlines = self.available_contacts()
        self.update_roster(onlines)
    end,

    'handle_online' : function(self, from, state)
        self.contacts[from].online = state
        self.mesh.print('handle_online ' + self.contacts)
        onlines = self.available_contacts()
        self.update_roster(onlines)
    end,

    'available_contacts' : function(self)
        sys.print('ac : ' + self.contacts)
        self.roster = [k for k,v in self.contacts where v.online]
        sys.print('roster : ' + self.roster)
        return self.roster
    end,

    'update_roster' : function(self, contacts)
        sys.ui_set(self.ui.roster)
    end,

    'handle_signined' : function(self, socket, mc3)
        if mc3.token then
            self.token = mc3.token
            self.contacts = mc3.contacts
            sys.save(self.creds, 'creds')
            self.main()
        else
            self.creds = nil
            sys.ui_set(self.ui.error, mc3.error)
        end
    end,


    'handle_chat' : function(self, chat, from)
        self.text = chat
        self.ui_chat(chat, from)
    end,

    'send' : function(self, other, chat)

        msgtext = ['event':'chat', 'chat':chat]
        self.mesh.send_to(other, msgtext)

    end,

    'deleteContact' : function(self)

        self.contacts = self.contacts - self.peer
        mc4 = ['event' : 'contacts', 'contacts' : self.contacts]
        self.mesh.send_to('server', mc4)
        self.settings()

    end,


    'add_contact' : function(self, friend)
        self.contacts[friend] = []
        sys.print('fz ' + friend + ' -- ' + self.contacts)
        mc4 = ['event' : 'contacts', 'contacts' : self.contacts.keys]
        self.mesh.send_to('server', mc4)
    end,

    'signin' : function(self, id, pw, entrance)
        self.entrance = entrance # signup or signin
        self.login()
    end,

    'signout' : function(self)
        msgso = ['event':'signout', self.token]
        self.mesh.send_to('server', msgso)
    end,

    'forget' : function(self)
        msgf = ['event':'forget', self.token]
        self.mesh.send_to('server', msgf)
    end,

    'signup' : function(self, id, pw)
        self.signin(id, pw, 'signup')
    end,


    ####### test

    'handle_test' : function(self, msg7)

        action = msg7.action
        path = self.watched + msg7.path
        status = 'done'

        # if not msg7.retry then self.mesh.print('test ' + msg7.seq  +': '+ msg7) end

        if action == 'signup' then
            self.signup(msg7.id, msg7.pw)

        else if action == 'signin' then
            self.signin(msg7.id, msg7.pw)

        else if action == 'signout' then
            self.signout()

        else if action == 'forget' then
            self.forget()

        else if action == 'presence' then
            p = msg7.presense
            if p == 'add' then
                self.add_contact(msg7.id)
            else if p == 'del' then
                self.del_contact(msg7.id)
            else if p == 'online'
                status = self.roster[msg7.who] == msg7.online
            end
            
        else if action == 'chat' then
            self.send(msg7.whom, msg7.chat)
        else if action == 'chatted' then
            status = (self.text == msg7.chat)

        else if action == 'offline' then
            self.offline = true
        else if action == 'online' then
            self.offline = nil
            self.mesh.connected()

        else if action == 'die' then
            sys.sleep(1000) # wait for broadcast to go out
            self.mesh.print('exiting')
            self.mesh.disconnect()
            sys.exit(0)

        else
            status = 'fail: unknown action ' + action
        end

        #self.mesh.print('result for ' + action +': '+ status)

        msg8 = ['event' : 'test', 'status' : status, 'seq' : msg7.seq, 'to' : msg7.from]
        self.mesh.send_to('server', msg8)

    end
]

####### main


id, firstly = test_init()
cid = 'client' + id
client.creds = ['id':cid, 'pw':id]
client[firstly]() # run init function from test_director
sys.loop()

