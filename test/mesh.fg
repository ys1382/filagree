####### mesh.fg

# default port is 1999  

Mesh = [

    'peers' : [], # maps id : socket
    'sreep' : [], # maps socket: id
    'seq'   : 0,

    'init' : function(self, id, port, mesh_subscribers)

        self.id = id
        self.port = port or 1999
        self.ctx = mesh_subscribers or []

        return self

    end,

    'subscribe' : function(self, subscriber)
        self.ctx = self.ctx + [subscriber]
    end,

    'listen' : function(self)
        self.print('listening on port ' + self.port)
        sys.listen(self.port, self)    # server listens for incoming socket connections
    end,


    'connect' : function(self, host)
        sys.connect(host or '127.0.0.1', self.port, self)
    end,


    'send_greet' : function(self, socket, whom)
        socket = socket or self.peers[whom] # id -> socket
        test = (socket.type == 'nil')
        msg1 = ['event' : 'greet', 'from' : self.id, 'test' : (test or nil)]
        for c1 in self.ctx
            msg1 = msg1 + c1.greet()
        end

        #self.print('socket.type='+socket.type+' test='+test)
        if test then
            #self.print('peers='+self.peers)
            for socket in self.peers.vals
                self.send(socket, msg1)
            end
        else
            self.send(socket, msg1)
        end
    end,


    'connected' : function(self, socket)
        self.send_greet(socket)
        for c2 in self.ctx
            c2.connected(socket)
        end
    end,

    # close a socket, or all if fd not specified
    'disconnect' : function(self, socket)

        self.mesh.print('disconnect ' + socket)

        if socket then
            sys.print('disconnect1 ' + socket)
            self.mesh.disconnect(socket)
        else
            for socket in self.peers.vals
            sys.print('disconnect2 ' + socket)
                self.mesh.disconnect(socket)
            end
        end
    
    end,


    'disconnected' : function(self, socket)
        id = self.sreep[socket]
        self.peers[id] = self.sreep[socket] = nil

        self.print('disconnected from ' + id)

        for c3 in self.ctx
            c3.disconnected(socket, id)
        end
    end,


    'handle_message' : function(self, socket, msg5)

        #sys.print('recv ' + msg5)

        if msg5.event == 'greet' then
            from = msg5.from
            self.print('connected to ' + from)
            self.peers[from] = socket
            self.sreep[socket] = from

            if msg5.test then self.connected(socket) end
        end
    end,


    'print' : function(self, line)
        sys.print('\t\t' + self.id +' -- '+ line)
    end,


    'messaged' : function(self, socket, msgm4)

        from = msgm4.from
        #self.print('message from ' + from + ' to ' + msgm4.to +': ' + msgm4.event +' '+msgm4.path +'@'+ msgm4.offset)
        self.print('messaged: ' + msgm4)

        if (not msgm4.to) or (msgm4.to == self.id) # por moi

            if msgm4.flood then
                self.broadcast(msgm4, socket)
            end

            if not (response = self.handle_message(socket, msgm4)) then
                for c4 in self.ctx

                    response = c4.handle_message(socket, msgm4)

                    if response then
                        mm2 = ['from' : self.id, 'seq' : msgm4.seq] + response
                        self.send_to(from, mm2)
                        return
                    end
                end
            end

        else # forward to recipient

            to = self.peers[msgm4.to] # id -> socket
            if not to then
                self.print('no peer ' + msgm4.to)
            else
                #self.print('forward to ' + msgm4.to)
                self.send(to, msgm4)
            end
        end
    end,


    'request' : function(self, to, msg)
        msg.seq = self.seq
        self.requests[self.seq] = msg
        self.send_to(to, msg)
    end,


    'send_to' : function(self, to, msg)

        msg.from = self.id
        msg.to = msg.to or to
        to2 = self.peers[to] # id -> socket

        # if no direct connection, then send via 'server'
        if not to2 then
            if self.id != 'server1' then
                to2 = self.peers['server1']
            else
                sys.print('no peer ' + to)
            end
        end

        self.send(to2, msg)

    end,


    'send' : function(self, to, msg)
        #sys.print(self.id + ' send to ' + to + ': ' + msg.event +' '+msg.path+' '+msg.offset)
        self.print('send to ' + to + ': ' + msg)
        sys.send(to, msg)
    end,


    'broadcast' : function(self, msg6, except_socket, except_id)
        if self.offline then
            return
        end

        msg6.flood = true
        msg6.from = msg6.from or self.id

        for socket in self.peers.vals where (socket != except_socket)
            if self.sreep[socket] != except_id then
                self.send(socket, msg6)
            end
        end
    end,
]
