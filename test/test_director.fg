####### test_director


import 'mesh'


test_director = [


    'id'    :       'test_director',
    'score' :       0,
    'queue' :       [],
    'active':       [],
    'descriptions': [],


    'handle_message' : function(self, socket, msg4)

        if (msg4.event == 'greet') then

            self.run_tests()
            self.dequeue()

        else if (msg4.event == 'test') then

            #sys.print('test result: ' + msg4)

            seq = ''+msg4.seq
            original_request = self.active[seq]
            self.active[seq] = nil

            ok = (msg4.status == 'done') or (msg4.status == 'pass')

            if (not ok) and (original_request.retry < 3) then # retry

                original_request.retry = original_request.retry + 1
                sys.sleep(original_request.retry * 1000)
                self.queue = [original_request] + self.queue # add back to head of q

            else #if msg4.status != 'done'
                self.received_result(msg4.seq, ok, true)
            end

            if self.dequeue() then # all tests done
                self.dequeue_title(self.current)
                sys.print('\ntesting complete: ' + self.score +' / '+ self.num_tests +' passed\n')
                self.scythe()
                sys.exit()
            end
        end
    end,

    'received_result' : function(self, seq, ok, subtest)

        #sys.print('received result for ' + seq)
        self.passing = self.passing and ok
        if ok then
            text = ': passed'
        else
            text = ': failed'
        end

        if not subtest then
            self.num_tests = self.num_tests + 1
            self.score = self.score + ok
        end

        desc = self.descriptions[seq]
        if subtest then
            sys.print('\t' + desc + text)
        else
            sys.print('\n' + desc + text + '\n')
        end

    end,


    'direct' : function(self, title, whom, action, params)

        self.seq = self.seq + 1

        self.descriptions[self.seq] = whom +' '+ title

        msg5 = ['event'     : 'test',
                'action'    : action,
                'from'      : self.id,
                'to'        : whom,
                'seq'       : self.seq
                ] + params

        sys.print('direct ' + msg5)

        self.queue = self.queue + [msg5]

    end,

    'test_title' : function(self, title)
        step = self.direct(title, nil, 'title')
    end,

    'local_step' : function(self)
        args = sys.args()
        #sys.print('local_step ' + args.part(1))
        self.direct(args[1], nil, args.part(1))
    end,

    'dequeue_title' : function(self, seq)

        if self.current then
            self.received_result(self.current, self.passing)
        end
        self.current = seq
        self.passing = true

    end,

    'dequeue' : function(self)

        if self.active.keys.length then # busy
            sys.print('dq busy')
            return false
        else if (not self.queue.length) then # all done
            return true
        end

        msg4 = self.queue.remove()[0]
        #sys.print('dq ' + msg4)

        if not msg4.to then
            params = msg4.action
            if params == 'title' then
                self.dequeue_title(msg4.seq)
            else if params[0] == 'fork' then
                sys.forkexec(params.part(1).pack())
            else
                self.step(params)
            end
            self.dequeue() # proceed to next step
        else
            self.active[''+msg4.seq] = msg4
            if self.active.keys.length != 1 then
                sys.print('dq error: ' + self.active)
                sys.exit(2)
            end

            self.mesh.send_to('server', msg4)
        end

    end,

    # fork-exec server and clients
    'launch' : function(self, mesh, path, server_name, num_clients, client_name)

        sys.print('launch server')
        sys.forkexec(false, path, server_name)
        sys.sleep(1000)

        i = 1
        while i <= num_clients
            sys.print('launch client ' + i +': '+ path +' '+ client_name)
            sys.forkexec(false, path, client_name, 'id=' + i)
            i = i + 1
        end

        sys.sleep(1000) # wait for clients to connect to server

        self.mesh = mesh
        self.mesh.connect()

    end,

    # send message to peer to exit
    'scythe' : function(self)

        self.after_tests()

        msgdie = ['event'   : 'test',
                'action'    : 'die',
                'from'      : self.id]

        self.mesh.broadcast(msgdie)
        sys.sleep(1000) # wait for 'done'

    end,

]
